...dont solve problems that dont need to be solved



January 21
    well you can make different modules play nicely in cmake
    and a script to generate it easily
    this feels like most things missing from an IDE are taken care of
    so then you have to ask, was it worth it?

    well if it generates ide projects as well maybe so!

    if a user updates the project in the ide without doing anything with cmake,
    the script i made can fix up the cmake build anyway.

    now its just about the files. thats nice!

    IS IT REALLY WORTH SPENDING TIME ON SOLVING THIS KIND OF PROBLEM
    if you want to justify it 

    think about how much technical debt is incurred if you DIDNT do this

    if your code becomes REUSABLE then its worth it.
    but an engine that works,, kind of is reusable already
    if its easy to understand it just allows other people to figure it out
    and thats a good thing if you have collaborators

    so i guess you're just pretending that you might have collaborators sometime. 
    well it was fun get to work on the game tho

January 15ish 
    cmake stuff fixed
    public folders hopefully work well

January 9/10 wednesday thursday
    study more aggressively and try small projects to make things manageable
    you instead learnt cmake in the space of 20 minutes

    lets make this project work out. and swap between this and poppi as you feel

    old log isnt relevant anymore

=======================
2019 has come

december 26 wednesday
    
    excuse me i need to be able to read my textbook completely
    and read faster than a middle-schooler.

december 13 thursday

    is it a module>? give it a cmakelists
    if you can't just copypaste a folder to another area
    youre using the build system wrong


november 22 thursday
    nailed the japanese test
    cmake lists just need to be made per... type of folder
    make some fake cross folder dependencies to see if the code is tight

november 17 sat
    cmake. lets get rid of stupid hacky visual studio redirecting headers
    if something SHOULD have public/private then let's do it
    if a folder is definetly going to have all its headers be public then dont do it
        but how do you know you won't make an extra utility header that people shouldn't use?
        ok try to almost always make public private then    
        >> its okay because cmakelists can list subdirectories instead of making a cmakelists file in each subdir
    make glfw link preferably via the lib folder instead of having it installed with clang
        prefer portability 


november 15 thu
    still settling after having moved country or something. woops!
    tried out a bunch of makefile stuff
    also tried out xcode. dont use same name/same dir or else you'll delete everything you've done
    the current focus is on a build system
    to make something like this cross platform cmake might be the easiest choice.
    
